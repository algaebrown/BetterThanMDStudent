% train neural net
%%originally created: 20160501
% last modified: 20160611

data=xlsread('avgallfalldataWithName.xlsx');
allidx=[1:size(data,1)];
load strangeclusall;
rmv=strangeclus';
%rmv=[65,98,171,207,222,259,273,277,300];
cleandata= setxor(allidx,rmv);
load fsortp; %this is the old selected feature
numOfF=40; %%%%change number of features here
selectIdx=featureIdxSortbyP(1:numOfF);
inputs=normr(data(cleandata,1:end-1));
inputs=inputs(:,selectIdx);
targets=data(cleandata,end);

inputs=inputs';
targets=targets';

t=[];
for a=1:length(targets)
    if targets(a)==1
       t(1:2,a)=[1;0];%[1;0]abnormal(1)
    else
        t(1:2,a)=[0;1];
    end
end

targets=t;
% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by NPRTOOL
%
% This script assumes these variables are defined:
%
%   cancerInputs - input data.
%   cancerTargets - target data.



% Create a Pattern Recognition Network
hiddenLayerSize = 30;
net = patternnet(hiddenLayerSize);


% Set up Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 80/100;
net.divideParam.valRatio = 10/100;
net.divideParam.testRatio = 10/100;


% Train the Network
[net,tr] = train(net,inputs,targets);

% Test the Network
outputs = net(inputs);
errors = gsubtract(targets,outputs);
performance = perform(net,targets,outputs)

% View the Network
view(net)

% Plots
% Uncomment these lines to enable various plots.
% figure, plotperform(tr)
% figure, plottrainstate(tr)
% figure, plotconfusion(targets,outputs)
% figure, ploterrhist(errors)